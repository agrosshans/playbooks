---
- hosts: all
  become: yes
  gather_facts: true

  #  vars:
  #  ansible_network_os: RedHat

  tasks:
  - name: openshift-postinstall | ensure SELINUX=enforcing
    lineinfile:
      path: /etc/selinux/config
      regexp: '^SELINUX='
      line: 'SELINUX=enforcing'

  - name: openshift-postinstall | ensure SELINUXTYPE=targeted
    lineinfile:
      path: /etc/selinux/config
      regexp: '^SELINUXTYPE='
      line: 'SELINUXTYPE=targeted'

  - name: openshift-postinstall | install necessary packages
    yum:
      name: "{{ packages }}"
    vars:
      packages:
      - wget
      - git
      - net-tools
      - bind-utils
      - yum-utils
      - deltarpm
      - iptables-services
      - bridge-utils
      - bash-completion
      - kexec-tools
      - sos
      - psacct
      - ntp
      - device-mapper-multipath
      - iscsi-initiator-utils
      - iscsi-initiator-utils-iscsiuio
      - device-mapper-multipath-libs
      - kpartx
      - httpd-tools
      - ebtables
      - firewalld
      - ipset-libs
      - apr
      - ipset
      - firewalld-filesystem
      - python-slip
      - python-firewall
      - apr-util
      - python-slip-dbus
      - NetworkManager
      - openvswitch

  - name: openshift-postinstall | set nofile
    blockinfile:
      path: /etc/security/limits.d/10-nofile.conf
      create: yes
      block: |
        *          soft    nofile     4096
        root       soft    nofile     unlimited
        ansible     soft    nofile     unlimited
  - name: openshift-postinstall | configure ntp
    template:
      src: templates/ntp.conf
      dest: /etc/ntp.conf

  - name: openshift-postinstall | enable ntp
    service:
      name: ntpd
      state: started
      enabled: yes

  - name: openshift-postinstall | ensure NM_CONTROLLED is set to yes
    lineinfile:
      path: /etc/sysconfig/network-scripts/ifcfg-ens192
      regexp: '^NM_CONTROLLED='
      line: 'NM_CONTROLLED=yes'

  - name: openshift-postinstall | ensure PEERDNS is set to yes
    lineinfile:
      path: /etc/sysconfig/network-scripts/ifcfg-ens192
      regexp: '^PEERDNS='
      line: 'PEERDNS=yes'

  - name: openshift-postinstall | disable ipv6 set net.ipv6.conf.all.disable_ipv6 to 1
    sysctl:
      name: net.ipv6.conf.all.disable_ipv6
      value: 1
      sysctl_set: yes
      state: present
      reload: yes
  - name: openshift-postinstall | disable ipv6 set net.ipv6.conf.default.disable_ipv6 to 1
    sysctl:
      name: net.ipv6.conf.default.disable_ipv6
      value: 1
      sysctl_set: yes
      state: present
      reload: yes

  - name: openshift-postinstall | add DNS servers for external resolution
    blockinfile:
      path: /etc/sysconfig/network-scripts/ifcfg-ens192
      block: |
        DNS1="192.168.1.13"
        DNS2="192.168.1.36"

  - name: openshift-postinstall | restart NetworkManager.service
    service:
      name: NetworkManager
      state: restarted
      enabled: yes

  - name: openshift-postinstall | add EPEL repository
    yum_repository:
      name: epel
      description: EPEL YUM repo
      baseurl: https://dl.fedoraproject.org/pub/epel/$releasever/$basearch/

  - name: openshift-postinstall | check file RPM-GPG-KEY-EPEL-7 presence
    stat:
      path: /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7
    register: gpgkeyepel7

  - name: openshift-postinstall | get RPM-GPG-KEY-EPEL-7
    uri:
      url: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7
      method: GET
      dest: /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7
    when: gpgkeyepel7.stat.exists == False

  - name: openshift-postinstall | import RPM-GPG-KEY-EPEL-7
    rpm_key:
      state: present
      key: /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7

  - name: openshift-postinstall | enable EPEL repository
    shell: sed -i -e "s/^enabled=1/enabled=0/" /etc/yum.repos.d/epel.repo

  - name: openshift-postinstall | install ansible pyOpenSSL
    yum:
      name: "{{ packages }}"
      enablerepo: epel
    vars:
      packages:
     #- ansible # need to have ansible at < v2.7
      - pyOpenSSL

  - name: openshift-postinstall | enable ansible 2.6 repo
    yum:
      name: centos-release-ansible26.noarch
      state: present

  - name: openshift-postinstall | install ansible 2.6
    yum:
      name: ansible
      enablerepo: centos-ansible26

  - name: openshift-postinstall | install pyOpenSSL
    yum:
      name: pyOpenSSL
      enablerepo: centos-ansible26


  - name: openshift-postinstall | install python-jinja2
    yum:
      name: python-jinja2
      enablerepo: centos-ansible26


  - name: openshift-postinstall | install python-lxml
    yum:
      name: python-lxml
      enablerepo: centos-ansible26

  - name: openshift-postinstall | install docker
    yum:
      name: "{{ packages }}"
      enablerepo: epel
    vars:
      packages:
      - docker-1.13.1
      - python-docker-pycreds
      - python-docker-py
      
  - name: openshift-postinstall | create the docker-pool
    blockinfile:
      path: /etc/sysconfig/docker-storage-setup
      block: |
        WIPE_SIGNATURES=true
        STORAGE_DRIVER=overlay2
        DEVS=/dev/sdb
        VG=docker-vg

  - name: openshift-postinstall | ensure no present data or metadata on /dev/sdb
    shell: /usr/sbin/wipefs -a /dev/sdb

  - name: openshift-postinstall | remove previous docker-vg
    lvg:
      vg: docker-vg
      pvs: /dev/sdb1
      force: yes
      state: absent

  - name: openshift-postinstall | run docker-storage-setup
    shell: /usr/bin/docker-storage-setup --reset

# - name: openshift-postinstall | change insecure-registry subnet

  - name: openshift-postinstall | setup insecure-registry
    lineinfile:
      path: /etc/sysconfig/docker
      regexp: "'OPTIONS='--selinux-enabled --log-driver=journald --signature-verification=false'"
      line: "'OPTIONS='--selinux-enabled --insecure-registry 172.17.0.1/16 --log-driver=journald --signature-verification=false'"

  - name: openshift-postinstall | enable and start the docker service
    service:
      name: docker
      state: started
      enabled: yes

  - name: openshift-postinstall | upgrade all packages
    yum:
      name: '*'
      state: latest
    register: require_reboot

  - name: openshift-postinstall | reboot systems
    shell: /usr/sbin/shutdown -r now
    async: 1
    poll: 0
    when: require_reboot is changed

  - name: openshift-postinstall | pause the playbook for 15 seconds
    pause:
      seconds: 10
    when: require_reboot is changed

  - name: openshift-postinstall | wait for systems to reboot
    wait_for_connection:
      connect_timeout: 20
      sleep: 5
      delay: 5
      timeout: 300
    delegate_to: localhost
    when: require_reboot is changed
